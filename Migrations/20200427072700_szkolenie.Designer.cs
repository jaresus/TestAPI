// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestAPI.Models;

namespace TestAPI.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    [Migration("20200427072700_szkolenie")]
    partial class szkolenie
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(85);

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(85);

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4")
                        .HasMaxLength(85);

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TestAPI.Models.Kwalifikacja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nazwa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Opis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("WydzialID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WydzialID");

                    b.ToTable("Kwalifikacje");
                });

            modelBuilder.Entity("TestAPI.Models.KwalifikacjaStanowisko", b =>
                {
                    b.Property<int>("KwalifikacjaID")
                        .HasColumnType("int");

                    b.Property<int>("StanowiskoID")
                        .HasColumnType("int");

                    b.HasKey("KwalifikacjaID", "StanowiskoID");

                    b.HasIndex("StanowiskoID");

                    b.ToTable("KwalifikacjeStanowiska");
                });

            modelBuilder.Entity("TestAPI.Models.KwalifikacjaWydzial", b =>
                {
                    b.Property<int>("KwalifikacjaID")
                        .HasColumnType("int");

                    b.Property<int>("WydzialID")
                        .HasColumnType("int");

                    b.HasKey("KwalifikacjaID", "WydzialID");

                    b.HasIndex("WydzialID");

                    b.ToTable("KwalifikacjeWydzialy");
                });

            modelBuilder.Entity("TestAPI.Models.Ocena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataDo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Komentarz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("KwalifikacjaID")
                        .HasColumnType("int");

                    b.Property<int>("OcenaV")
                        .HasColumnType("int");

                    b.Property<int>("PracownikID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StempelCzasu")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WprowadzajacyID")
                        .HasColumnType("varchar(85) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("KwalifikacjaID");

                    b.HasIndex("PracownikID");

                    b.HasIndex("WprowadzajacyID");

                    b.ToTable("Oceny");
                });

            modelBuilder.Entity("TestAPI.Models.OcenaArchiwum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUsuniecia")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Komentarz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Kwalifikacja")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("KwalifikacjaID")
                        .HasColumnType("int");

                    b.Property<int>("OcenaV")
                        .HasColumnType("int");

                    b.Property<string>("Pracownik")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PracownikID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StempelCzasu")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UsuniecieKomentarz")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuwajacyID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuwajacyNazwa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Wprowadzajacy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("WprowadzajacyID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("OcenaArchiwum");
                });

            modelBuilder.Entity("TestAPI.Models.PoczatkoweStanowiska", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StanowiskoID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("StanowiskoID");

                    b.ToTable("PoczatkoweStanowiska");
                });

            modelBuilder.Entity("TestAPI.Models.PoczatkoweWydzialy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Typ")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WydzialID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WydzialID");

                    b.ToTable("PoczatkoweWydzialy");
                });

            modelBuilder.Entity("TestAPI.Models.Pracownik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Firma")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Imie")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NrPersonalny")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StanowiskoID")
                        .HasColumnType("int");

                    b.Property<int>("WydzialID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StanowiskoID");

                    b.HasIndex("WydzialID");

                    b.ToTable("Pracownicy");
                });

            modelBuilder.Entity("TestAPI.Models.Stanowisko", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Opis")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Utworzono")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Zmieniono")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Stanowiska");
                });

            modelBuilder.Entity("TestAPI.Models.SzkolenieCel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cel")
                        .HasColumnType("int");

                    b.Property<int>("KwalifikacjaID")
                        .HasColumnType("int");

                    b.Property<int>("WydzialID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KwalifikacjaID");

                    b.HasIndex("WydzialID");

                    b.ToTable("SzkolenieCel");
                });

            modelBuilder.Entity("TestAPI.Models.Wydzial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IDParent")
                        .HasColumnType("int");

                    b.Property<bool>("IsBrygada")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nazwa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Wydzialy");
                });

            modelBuilder.Entity("TestAPI.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.Kwalifikacja", b =>
                {
                    b.HasOne("TestAPI.Models.Wydzial", null)
                        .WithMany("Kwalifikacje")
                        .HasForeignKey("WydzialID");
                });

            modelBuilder.Entity("TestAPI.Models.KwalifikacjaStanowisko", b =>
                {
                    b.HasOne("TestAPI.Models.Kwalifikacja", "Kwalifikacja")
                        .WithMany("KwalifikacjaStanowisko")
                        .HasForeignKey("KwalifikacjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Stanowisko", "Stanowisko")
                        .WithMany("KwalifikacjaStanowisko")
                        .HasForeignKey("StanowiskoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.KwalifikacjaWydzial", b =>
                {
                    b.HasOne("TestAPI.Models.Kwalifikacja", "Kwalifikacja")
                        .WithMany("KwalifikacjaWydzial")
                        .HasForeignKey("KwalifikacjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Wydzial", "Wydzial")
                        .WithMany("KwalifikacjaWydzial")
                        .HasForeignKey("WydzialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.Ocena", b =>
                {
                    b.HasOne("TestAPI.Models.Kwalifikacja", "Kwalifikacja")
                        .WithMany("Oceny")
                        .HasForeignKey("KwalifikacjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Pracownik", "Pracownik")
                        .WithMany("Oceny")
                        .HasForeignKey("PracownikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.ApplicationUser", "Wprowadzajacy")
                        .WithMany()
                        .HasForeignKey("WprowadzajacyID");
                });

            modelBuilder.Entity("TestAPI.Models.PoczatkoweStanowiska", b =>
                {
                    b.HasOne("TestAPI.Models.Stanowisko", "Stanowisko")
                        .WithMany()
                        .HasForeignKey("StanowiskoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.PoczatkoweWydzialy", b =>
                {
                    b.HasOne("TestAPI.Models.Wydzial", "Wydzial")
                        .WithMany()
                        .HasForeignKey("WydzialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.Pracownik", b =>
                {
                    b.HasOne("TestAPI.Models.Stanowisko", "Stanowisko")
                        .WithMany("Pracownik")
                        .HasForeignKey("StanowiskoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Wydzial", "Wydzial")
                        .WithMany("Pracownicy")
                        .HasForeignKey("WydzialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestAPI.Models.SzkolenieCel", b =>
                {
                    b.HasOne("TestAPI.Models.Kwalifikacja", "Kwalifikacja")
                        .WithMany()
                        .HasForeignKey("KwalifikacjaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAPI.Models.Wydzial", "Wydzial")
                        .WithMany()
                        .HasForeignKey("WydzialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
